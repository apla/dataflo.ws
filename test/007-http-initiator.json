{
	"initiator": {
		"http": {
			"port": "50299",
			"domain": "127.0.0.1",
			"static": {
				"root": "./test"
			},

			"prepare": 	{
				"post": {
					"tasks": [{
						"$class": "post",
						"request": "{$request}",
						"$set": "request.body"
					}]
				}
			},
			"flows":[{
				"path": ""
			}, {
				"path": "^(\\w+)$",
				"prepare": ["post"],
				"tasks": [{
					"$function": "dfHandleGet",
					"require":   "{$request.GET}"
				}],
				"presenter": "json"
			}, {
				"path": "test",
				"flows": [{
					"path": "redirect",
					"tasks":[{
						"$class": "redirect",
						"url": "/test/redirected",
						"output": "{$response}"
					}],
					"presenter": {
						"headers": {
							"Set-Cookie": "auth=123; expires=Fri, 31 Jan 2031 00:00:00 GMT; path=/; domain=127.0.0.1"
						}
					}
				}, {
					"path": "redirected",
					"presenter": {
						"type": "json",
						"vars": "{$request.headers}",
						"verbose": true
					}
				}, {
					"path": "timeout",
					"data": {
						"empty response": true
					},
					"tasks":[{
						"$class": "sleep",
						"amount": 500
					}],
					"presenter": {
						"type": "json",
						"dump": true
					}
				}, {
					"path": "post",
					"prepare": ["post"],
					"tasks": [{
						"$function": "dfHandleGet",
						"$logTitle": "12345",
						"require":   "{$request.POST}"
					}],
					"presenter": {
						"type": "json",
						"vars": "{$request.body}"
					}
				}, {
					"path": "path-info",
					"pathInfo": true,
					"flows": [{
						"path": "x",
						"pathInfo": false
					}],
					"tasks":[{
						"fn": "dfRequestInfo",
						"$args": "{$request}",
						"$set": "requestInfo"
					}],
					"presenter": {
						"type": "json",
						"vars": "{$requestInfo}"
					}
				}]
			}]
		}
	},
	"templates": {
		"task": {
			"jsonParseAndMerge": {
				"$origin":    "{$global.JSON}",
				"$function":  "parse",
				"$mergeWith": "result"
			},
			"jsonParseAndSet": {
				"$origin":    "{$global.JSON}",
				"$function":  "parse",
				"$set":       "result"
			},
			"indexEqItem": {
				"$function": "throwUnlessEqual",
				"$args": [
					"[*every.index]",
					"[*every.item]"
				]
			},
			"testHttpResource": {
				"$class":"urlData",
				"$method": "toBuffer"
			}
		}
	},
	"tests": {
		"static": {
			"expect": "ok",
			"tasks": [{
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/favicon.ico",
				"successCodes": "2xx",
				"$setOnFail": "favicon"
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": [404, "{$favicon.code}", "favicon http response:"],
				"$important": true
			}, {
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/000-string.interpolate.js",
				"successCodes": "2xx",
				"$set": "indexPage"
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": [200, "{$indexPage.code}", "index page http response:"],
				"$important": true
			}]
		},
		"post": {
			"expect": "ok",
			"tasks": [{
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/post",
				"successCodes": "2xx",
				"$setOnFail": "postNoDataObj"
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": [500, "{$postNoDataObj.code}", "post page http response:"],
				"$important": true
			}, {
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/post",
				"bodyData": {
					"a": "b",
					"c": "d"
				},
				"successCodes": "2xx",
				"$set": "postObj"
			}, {
				"$function": "dfShowBuffer",
				"$args":   "{$postObj.data}"
			}, {
				"$function": "JSON.parse",
				"$args": ["{$postObj.data}"],
				"$set": "postData"
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": ["b", "{$postData.fields.a}", "post page http response:"],
				"$important": true
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": ["d", "{$postData.fields.c}", "post page http response:"],
				"$important": true
			}]
		},
		"redirect": {
			"expect": "ok",
			"tasks": [{
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/redirect",
				"successCodes": "2xx",
				"$set": "redirectObj"
			}, {
				"$function": "JSON.parse",
				"$args": ["{$redirectObj.data}"],
				"$set": "redirectData"
			}, {
				"$function": "console.log",
				"$args": [
					"{$redirectData}"
				]
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": ["auth=123", "{$redirectData.cookie}", "redirect cookie page http response:"],
				"$important": true
			}]
		},
		"timeout": {
			"expect": "ok",
			"tasks": [{
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/timeout",
				"successCodes": "2xx",
				"timeout": 1000,
				"$set": "noTimeoutObj"
			}, {
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/timeout",
				"successCodes": "2xx",
				"timeout": 1000,
				"method": "toFile",
				"//TODO": "make sure isSameUrlLoading is called",
				"$set": "noTimeoutObj2"
			}, {
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/timeout",
				"successCodes": "2xx",
				"timeout": 1000,
				"after": "{$noTimeoutObj2}",
				"method": "toFile",
				"//TODO": "make sure isSameUrlLoading is called",
				"$set": "noTimeoutObj3"
			}, {
				"$function": "console.log",
				"$args": [
					"{$noTimeoutObj.data}"
				],
				"$important": true
			}, {
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/timeout",
				"successCodes": "2xx",
				"timeout": 100,
				"$setOnFail": "timeoutObj"
			}, {
				"$function": "console.log",
				"$args": [
					"{$timeoutObj}"
				],
				"$important": true
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": [504, "{$timeoutObj.code}", "timeout page http response:"],
				"$important": true

			}]
		},
		"pathInfo": {
			"expect": "ok",
			"tasks": [{
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/path-info/a/b/c/d/e/f",
				"successCodes": "2xx",
				"$set": "pathInfoPage"
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": [200, "{$pathInfoPage.code}", "path-info page http response:"],
				"$important": true
			}, {
				"$function": "dfShowBuffer",
				"$args":   "{$pathInfoPage.data}"
			}, {
				"$function": "JSON.parse",
				"$args": ["{$pathInfoPage.data}"],
				"$set": "pathInfoData"
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": ["a/b/c/d/e/f", "{$pathInfoData.pathInfo}", "path-info value:"],
				"$important": true
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": ["f", "{$pathInfoData.fileName}", "path-info fileName:"],
				"$important": true
			}, {
				"$template": "testHttpResource",
				"url": "http://{$initiator.http.domain}:{$initiator.http.port}/test/path-info/x/y/z",
				"successCodes": "2xx",
				"$setOnFail": "pathInfoFailPage"
			}, {
				"$function": "dfThrowUnlessEqual",
				"$args": [404, "{$pathInfoFailPage.code}", "path-info override"],
				"$important": true
			}]
		}
	}
}
